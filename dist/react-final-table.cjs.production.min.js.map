{"version":3,"file":"react-final-table.cjs.production.min.js","sources":["../src/utils.ts","../src/hooks.tsx"],"sourcesContent":["export const byTextAscending = <T extends Record<string, any>>(\n  getTextProperty: (object: T) => string\n) => (objectA: T, objectB: T) => {\n  const upperA = getTextProperty(objectA).toUpperCase();\n  const upperB = getTextProperty(objectB).toUpperCase();\n  if (upperA < upperB) {\n    return -1;\n  }\n  if (upperA > upperB) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const byTextDescending = <T extends Record<string, any>>(\n  getTextProperty: (object: T) => string\n) => (objectA: T, objectB: T) => {\n  const upperA = getTextProperty(objectA).toUpperCase();\n  const upperB = getTextProperty(objectB).toUpperCase();\n  if (upperA > upperB) {\n    return -1;\n  }\n  if (upperA < upperB) {\n    return 1;\n  }\n  return 0;\n};\n","import { useMemo, useReducer, useEffect, ReactNode, useCallback } from 'react';\n\nimport {\n  ColumnByNamesType,\n  ColumnType,\n  TableState,\n  TableAction,\n  DataType,\n  UseTableReturnType,\n  UseTableOptionsType,\n  RowType,\n  HeaderType,\n  HeaderRenderType,\n  ColumnStateType,\n} from './types';\nimport { byTextAscending } from './utils';\n\nconst createReducer = <T extends DataType>() => (\n  state: TableState<T>,\n  action: TableAction<T>\n): TableState<T> => {\n  switch (action.type) {\n    case 'SET_ROWS':\n      let rows = [...action.data];\n      // preserve sorting if a sort is already enabled when data changes\n      if (state.sortColumn) {\n        rows = sortByColumn(action.data, state.sortColumn, state.columns);\n      }\n\n      if (state.paginationEnabled) {\n        rows = getPaginatedData(\n          rows,\n          state.pagination.perPage,\n          state.pagination.page\n        );\n      }\n\n      return {\n        ...state,\n        rows,\n        originalRows: action.data,\n      };\n\n    case 'NEXT_PAGE':\n      const nextPage = state.pagination.page + 1;\n      return {\n        ...state,\n        rows: getPaginatedData(\n          state.originalRows,\n          state.pagination.perPage,\n          nextPage\n        ),\n        pagination: {\n          ...state.pagination,\n          page: nextPage,\n          canNext:\n            nextPage * state.pagination.perPage < state.originalRows.length,\n          canPrev: nextPage !== 1,\n        },\n      };\n    case 'PREV_PAGE':\n      const prevPage =\n        state.pagination.page === 1 ? 1 : state.pagination.page - 1;\n\n      return {\n        ...state,\n        rows: getPaginatedData(\n          state.originalRows,\n          state.pagination.perPage,\n          prevPage\n        ),\n        pagination: {\n          ...state.pagination,\n          page: prevPage,\n          canNext:\n            prevPage * state.pagination.perPage < state.originalRows.length,\n          canPrev: prevPage !== 1,\n        },\n      };\n    case 'TOGGLE_SORT':\n      if (!(action.columnName in state.columnsByName)) {\n        throw new Error(`Invalid column, ${action.columnName} not found`);\n      }\n\n      let isAscending: boolean | null = null;\n\n      let sortedRows: RowType<T>[] = [];\n\n      // loop through all columns and set the sort parameter to off unless\n      // it's the specified column (only one column at a time for )\n      const columnCopy = state.columns.map(column => {\n        // if the row was found\n        if (action.columnName === column.name) {\n          if (action.isAscOverride !== undefined) {\n            // force the sort order\n            isAscending = action.isAscOverride;\n          } else {\n            // if it's undefined, start by setting to ascending, otherwise toggle\n            isAscending =\n              column.sorted.asc === undefined ? true : !column.sorted.asc;\n          }\n\n          // default to sort by string\n          const columnCompareFn =\n            column.sort ||\n            byTextAscending(object => object.original[action.columnName]);\n          sortedRows = state.rows.sort((a, b) => {\n            const result = columnCompareFn(a, b);\n            return isAscending ? result : result * -1;\n          });\n\n          return {\n            ...column,\n            sorted: {\n              on: true,\n              asc: isAscending,\n            },\n          };\n        }\n        // set sorting to false for all other columns\n        return {\n          ...column,\n          sorted: {\n            on: false,\n            asc: false,\n          },\n        };\n      });\n\n      return {\n        ...state,\n        columns: columnCopy,\n        rows: sortedRows,\n        sortColumn: action.columnName,\n        columnsByName: getColumnsByName(columnCopy),\n      };\n    case 'GLOBAL_FILTER':\n      const filteredRows = action.filter(state.originalRows);\n      const selectedRowsById: { [key: number]: boolean } = {};\n      state.selectedRows.forEach(row => {\n        selectedRowsById[row.id] = !!row.selected;\n      });\n\n      return {\n        ...state,\n        rows: filteredRows.map(row => {\n          return selectedRowsById[row.id]\n            ? { ...row, selected: selectedRowsById[row.id] }\n            : { ...row };\n        }),\n        filterOn: true,\n      };\n    case 'SELECT_ROW':\n      const stateCopy = { ...state };\n\n      stateCopy.rows = stateCopy.rows.map(row => {\n        const newRow = { ...row };\n        if (newRow.id === action.rowId) {\n          newRow.selected = !newRow.selected;\n        }\n        return newRow;\n      });\n\n      stateCopy.originalRows = stateCopy.originalRows.map(row => {\n        const newRow = { ...row };\n        if (newRow.id === action.rowId) {\n          newRow.selected = !newRow.selected;\n        }\n        return newRow;\n      });\n\n      stateCopy.selectedRows = stateCopy.originalRows.filter(\n        row => row.selected\n      );\n\n      stateCopy.toggleAllState =\n        stateCopy.selectedRows.length === stateCopy.rows.length;\n\n      return stateCopy;\n    case 'SEARCH_STRING':\n      const stateCopySearch = { ...state };\n      stateCopySearch.rows = stateCopySearch.originalRows.filter(\n        row =>\n          row.cells.filter(cell => cell.value.includes(action.searchString))\n            .length > 0\n      );\n      return stateCopySearch;\n    case 'TOGGLE_ALL':\n      const stateCopyToggle = { ...state };\n      const rowIds: { [key: number]: boolean } = {};\n\n      const selected = state.selectedRows.length < state.rows.length;\n      stateCopyToggle.rows = stateCopyToggle.rows.map(row => {\n        rowIds[row.id] = selected;\n        return { ...row, selected };\n      });\n\n      stateCopyToggle.toggleAllState = selected;\n\n      stateCopyToggle.originalRows = stateCopyToggle.originalRows.map(row => {\n        return row.id in rowIds\n          ? { ...row, selected: rowIds[row.id] }\n          : { ...row };\n      });\n\n      stateCopyToggle.selectedRows = stateCopyToggle.originalRows.filter(\n        row => row.selected\n      );\n\n      return stateCopyToggle;\n    default:\n      throw new Error('Invalid reducer action');\n  }\n};\n\nexport const useTable = <T extends DataType>(\n  columns: ColumnType<T>[],\n  data: T[],\n  options?: UseTableOptionsType<T>\n): UseTableReturnType<T> => {\n  const columnsWithSorting: ColumnStateType<T>[] = useMemo(\n    () =>\n      columns.map(column => {\n        return {\n          ...column,\n          label: column.label ? column.label : column.name,\n          hidden: column.hidden ? column.hidden : false,\n          sort: column.sort,\n          sorted: {\n            on: false,\n          },\n        };\n      }),\n    [columns]\n  );\n  const columnsByName = useMemo(() => getColumnsByName(columnsWithSorting), [\n    columnsWithSorting,\n  ]);\n\n  const tableData: RowType<T>[] = useMemo(() => {\n    const sortedData = sortDataInOrder(data, columnsWithSorting);\n\n    const newData = sortedData.map((row, idx) => {\n      return {\n        id: idx,\n        selected: false,\n        hidden: false,\n        original: row,\n        cells: Object.entries(row)\n          .map(([column, value]) => {\n            return {\n              hidden: columnsByName[column].hidden,\n              field: column,\n              value: value,\n              render: makeRender(value, columnsByName[column].render, row),\n            };\n          })\n          .filter(cell => !cell.hidden),\n      };\n    });\n    return newData;\n  }, [data, columnsWithSorting, columnsByName]);\n\n  const reducer = createReducer<T>();\n\n  const [state, dispatch] = useReducer(reducer, {\n    columns: columnsWithSorting,\n    columnsByName: columnsByName,\n    originalRows: tableData,\n    rows: tableData,\n    selectedRows: [],\n    toggleAllState: false,\n    filterOn: !!options?.filter,\n    sortColumn: null,\n    paginationEnabled: !!options?.pagination,\n    pagination: {\n      page: 1,\n      perPage: 10,\n      canNext: true,\n      canPrev: false,\n      nextPage: () => {},\n      prevPage: () => {},\n    },\n  });\n\n  state.pagination.nextPage = useCallback(() => {\n    dispatch({ type: 'NEXT_PAGE' });\n  }, [dispatch]);\n  state.pagination.prevPage = useCallback(\n    () => dispatch({ type: 'PREV_PAGE' }),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    dispatch({ type: 'SET_ROWS', data: tableData });\n  }, [tableData]);\n\n  const headers: HeaderType<T>[] = useMemo(() => {\n    return [\n      ...state.columns.map(column => {\n        const label = column.label ? column.label : column.name;\n        return {\n          ...column,\n          render: makeHeaderRender(label, column.headerRender),\n        };\n      }),\n    ];\n  }, [state.columns]);\n\n  const filter = options?.filter;\n  useEffect(() => {\n    if (filter) {\n      dispatch({ type: 'GLOBAL_FILTER', filter });\n    }\n  }, [filter]);\n\n  return {\n    headers: headers.filter(column => !column.hidden),\n    rows: state.rows,\n    originalRows: state.originalRows,\n    selectedRows: state.selectedRows,\n    dispatch,\n    selectRow: (rowId: number) => dispatch({ type: 'SELECT_ROW', rowId }),\n    toggleAll: () => dispatch({ type: 'TOGGLE_ALL' }),\n    toggleSort: (columnName: string, isAscOverride?: boolean) =>\n      dispatch({ type: 'TOGGLE_SORT', columnName, isAscOverride }),\n    setSearchString: (searchString: string) =>\n      dispatch({ type: 'SEARCH_STRING', searchString }),\n    pagination: state.pagination,\n    toggleAllState: state.toggleAllState,\n  };\n};\n\nconst makeRender = <T extends DataType>(\n  value: any,\n  render: (({ value, row }: { value: any; row: T }) => ReactNode) | undefined,\n  row: T\n) => {\n  return render ? () => render({ row, value }) : () => value;\n};\n\nconst makeHeaderRender = (\n  label: string,\n  render: HeaderRenderType | undefined\n) => {\n  return render ? () => render({ label }) : () => label;\n};\n\nconst sortDataInOrder = <T extends DataType>(\n  data: T[],\n  columns: ColumnType<T>[]\n): T[] => {\n  return data.map((row: any) => {\n    const newRow: any = {};\n    columns.forEach(column => {\n      if (!(column.name in row)) {\n        throw new Error(`Invalid row data, ${column.name} not found`);\n      }\n      newRow[column.name] = row[column.name];\n    });\n    return newRow;\n  });\n};\n\nconst sortByColumn = <T extends DataType>(\n  data: RowType<T>[],\n  sortColumn: string,\n  columns: ColumnStateType<T>[]\n): RowType<T>[] => {\n  let isAscending: boolean | null | undefined = null;\n  let sortedRows: RowType<T>[] = [...data];\n\n  columns.forEach(column => {\n    // if the row was found\n    if (sortColumn === column.name) {\n      isAscending = column.sorted.asc;\n\n      // default to sort by string\n      const columnCompareFn =\n        column.sort || byTextAscending(object => object.original[sortColumn]);\n      sortedRows = data.sort((a, b) => {\n        const result = columnCompareFn(a, b);\n        return isAscending ? result : result * -1;\n      });\n    }\n  });\n\n  return sortedRows;\n};\n\nconst getColumnsByName = <T extends DataType>(\n  columns: ColumnType<T>[]\n): ColumnByNamesType<T> => {\n  const columnsByName: ColumnByNamesType<T> = {};\n  columns.forEach(column => {\n    const col: any = {\n      label: column.label,\n    };\n\n    if (column.render) {\n      col['render'] = column.render;\n    }\n    col['hidden'] = column.hidden;\n    columnsByName[column.name] = col;\n  });\n\n  return columnsByName;\n};\n\nconst getPaginatedData = <T extends DataType>(\n  rows: RowType<T>[],\n  perPage: number,\n  page: number\n) => {\n  const start = (page - 1) * perPage;\n  const end = start + perPage;\n  return rows.slice(start, end);\n};\n"],"names":["byTextAscending","getTextProperty","objectA","objectB","upperA","toUpperCase","upperB","makeRender","value","render","row","getColumnsByName","columns","columnsByName","forEach","column","col","label","hidden","name","getPaginatedData","rows","perPage","page","start","slice","data","options","columnsWithSorting","useMemo","map","sort","sorted","on","tableData","newRow","Error","sortDataInOrder","idx","id","selected","original","cells","Object","entries","field","filter","cell","useReducer","state","action","type","sortColumn","isAscending","sortedRows","asc","columnCompareFn","object","a","b","result","sortByColumn","paginationEnabled","pagination","originalRows","nextPage","canNext","length","canPrev","prevPage","columnName","columnCopy","undefined","isAscOverride","filteredRows","selectedRowsById","selectedRows","filterOn","stateCopy","rowId","toggleAllState","stateCopySearch","includes","searchString","stateCopyToggle","rowIds","dispatch","useCallback","useEffect","headers","headerRender","selectRow","toggleAll","toggleSort","setSearchString"],"mappings":"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"}