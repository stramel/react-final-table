{"version":3,"file":"react-final-table.esm.js","sources":["../src/utils.ts","../src/hooks.tsx"],"sourcesContent":["export const byTextAscending = <T extends Record<string, any>>(\n  getTextProperty: (object: T) => string\n) => (objectA: T, objectB: T) => {\n  const upperA = getTextProperty(objectA).toUpperCase();\n  const upperB = getTextProperty(objectB).toUpperCase();\n  if (upperA < upperB) {\n    return -1;\n  }\n  if (upperA > upperB) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const byTextDescending = <T extends Record<string, any>>(\n  getTextProperty: (object: T) => string\n) => (objectA: T, objectB: T) => {\n  const upperA = getTextProperty(objectA).toUpperCase();\n  const upperB = getTextProperty(objectB).toUpperCase();\n  if (upperA > upperB) {\n    return -1;\n  }\n  if (upperA < upperB) {\n    return 1;\n  }\n  return 0;\n};\n","import { useMemo, useReducer, useEffect, ReactNode, useCallback } from 'react';\n\nimport {\n  ColumnByNamesType,\n  ColumnType,\n  TableState,\n  TableAction,\n  DataType,\n  UseTableReturnType,\n  UseTableOptionsType,\n  RowType,\n  HeaderType,\n  HeaderRenderType,\n  ColumnStateType,\n} from './types';\nimport { byTextAscending } from './utils';\n\nconst createReducer = <T extends DataType>() => (\n  state: TableState<T>,\n  action: TableAction<T>\n): TableState<T> => {\n  switch (action.type) {\n    case 'SET_ROWS':\n      let rows = [...action.data];\n      // preserve sorting if a sort is already enabled when data changes\n      if (state.sortColumn) {\n        rows = sortByColumn(action.data, state.sortColumn, state.columns);\n      }\n\n      if (state.paginationEnabled) {\n        rows = getPaginatedData(\n          rows,\n          state.pagination.perPage,\n          state.pagination.page\n        );\n      }\n\n      return {\n        ...state,\n        rows,\n        originalRows: action.data,\n      };\n\n    case 'NEXT_PAGE':\n      const nextPage = state.pagination.page + 1;\n      return {\n        ...state,\n        rows: getPaginatedData(\n          state.originalRows,\n          state.pagination.perPage,\n          nextPage\n        ),\n        pagination: {\n          ...state.pagination,\n          page: nextPage,\n          canNext:\n            nextPage * state.pagination.perPage < state.originalRows.length,\n          canPrev: nextPage !== 1,\n        },\n      };\n    case 'PREV_PAGE':\n      const prevPage =\n        state.pagination.page === 1 ? 1 : state.pagination.page - 1;\n\n      return {\n        ...state,\n        rows: getPaginatedData(\n          state.originalRows,\n          state.pagination.perPage,\n          prevPage\n        ),\n        pagination: {\n          ...state.pagination,\n          page: prevPage,\n          canNext:\n            prevPage * state.pagination.perPage < state.originalRows.length,\n          canPrev: prevPage !== 1,\n        },\n      };\n    case 'TOGGLE_SORT':\n      if (!(action.columnName in state.columnsByName)) {\n        throw new Error(`Invalid column, ${action.columnName} not found`);\n      }\n\n      let isAscending: boolean | null = null;\n\n      let sortedRows: RowType<T>[] = [];\n\n      // loop through all columns and set the sort parameter to off unless\n      // it's the specified column (only one column at a time for )\n      const columnCopy = state.columns.map(column => {\n        // if the row was found\n        if (action.columnName === column.name) {\n          if (action.isAscOverride !== undefined) {\n            // force the sort order\n            isAscending = action.isAscOverride;\n          } else {\n            // if it's undefined, start by setting to ascending, otherwise toggle\n            isAscending =\n              column.sorted.asc === undefined ? true : !column.sorted.asc;\n          }\n\n          // default to sort by string\n          const columnCompareFn =\n            column.sort ||\n            byTextAscending(object => object.original[action.columnName]);\n          sortedRows = state.rows.sort((a, b) => {\n            const result = columnCompareFn(a, b);\n            return isAscending ? result : result * -1;\n          });\n\n          return {\n            ...column,\n            sorted: {\n              on: true,\n              asc: isAscending,\n            },\n          };\n        }\n        // set sorting to false for all other columns\n        return {\n          ...column,\n          sorted: {\n            on: false,\n            asc: false,\n          },\n        };\n      });\n\n      return {\n        ...state,\n        columns: columnCopy,\n        rows: sortedRows,\n        sortColumn: action.columnName,\n        columnsByName: getColumnsByName(columnCopy),\n      };\n    case 'GLOBAL_FILTER':\n      const filteredRows = action.filter(state.originalRows);\n      const selectedRowsById: { [key: number]: boolean } = {};\n      state.selectedRows.forEach(row => {\n        selectedRowsById[row.id] = !!row.selected;\n      });\n\n      return {\n        ...state,\n        rows: filteredRows.map(row => {\n          return selectedRowsById[row.id]\n            ? { ...row, selected: selectedRowsById[row.id] }\n            : { ...row };\n        }),\n        filterOn: true,\n      };\n    case 'SELECT_ROW':\n      const stateCopy = { ...state };\n\n      stateCopy.rows = stateCopy.rows.map(row => {\n        const newRow = { ...row };\n        if (newRow.id === action.rowId) {\n          newRow.selected = !newRow.selected;\n        }\n        return newRow;\n      });\n\n      stateCopy.originalRows = stateCopy.originalRows.map(row => {\n        const newRow = { ...row };\n        if (newRow.id === action.rowId) {\n          newRow.selected = !newRow.selected;\n        }\n        return newRow;\n      });\n\n      stateCopy.selectedRows = stateCopy.originalRows.filter(\n        row => row.selected\n      );\n\n      stateCopy.toggleAllState =\n        stateCopy.selectedRows.length === stateCopy.rows.length;\n\n      return stateCopy;\n    case 'SEARCH_STRING':\n      const stateCopySearch = { ...state };\n      stateCopySearch.rows = stateCopySearch.originalRows.filter(\n        row =>\n          row.cells.filter(cell => cell.value.includes(action.searchString))\n            .length > 0\n      );\n      return stateCopySearch;\n    case 'TOGGLE_ALL':\n      const stateCopyToggle = { ...state };\n      const rowIds: { [key: number]: boolean } = {};\n\n      const selected = state.selectedRows.length < state.rows.length;\n      stateCopyToggle.rows = stateCopyToggle.rows.map(row => {\n        rowIds[row.id] = selected;\n        return { ...row, selected };\n      });\n\n      stateCopyToggle.toggleAllState = selected;\n\n      stateCopyToggle.originalRows = stateCopyToggle.originalRows.map(row => {\n        return row.id in rowIds\n          ? { ...row, selected: rowIds[row.id] }\n          : { ...row };\n      });\n\n      stateCopyToggle.selectedRows = stateCopyToggle.originalRows.filter(\n        row => row.selected\n      );\n\n      return stateCopyToggle;\n    default:\n      throw new Error('Invalid reducer action');\n  }\n};\n\nexport const useTable = <T extends DataType>(\n  columns: ColumnType<T>[],\n  data: T[],\n  options?: UseTableOptionsType<T>\n): UseTableReturnType<T> => {\n  const columnsWithSorting: ColumnStateType<T>[] = useMemo(\n    () =>\n      columns.map(column => {\n        return {\n          ...column,\n          label: column.label ? column.label : column.name,\n          hidden: column.hidden ? column.hidden : false,\n          sort: column.sort,\n          sorted: {\n            on: false,\n          },\n        };\n      }),\n    [columns]\n  );\n  const columnsByName = useMemo(() => getColumnsByName(columnsWithSorting), [\n    columnsWithSorting,\n  ]);\n\n  const tableData: RowType<T>[] = useMemo(() => {\n    const sortedData = sortDataInOrder(data, columnsWithSorting);\n\n    const newData = sortedData.map((row, idx) => {\n      return {\n        id: idx,\n        selected: false,\n        hidden: false,\n        original: row,\n        cells: Object.entries(row)\n          .map(([column, value]) => {\n            return {\n              hidden: columnsByName[column].hidden,\n              field: column,\n              value: value,\n              render: makeRender(value, columnsByName[column].render, row),\n            };\n          })\n          .filter(cell => !cell.hidden),\n      };\n    });\n    return newData;\n  }, [data, columnsWithSorting, columnsByName]);\n\n  const reducer = createReducer<T>();\n\n  const [state, dispatch] = useReducer(reducer, {\n    columns: columnsWithSorting,\n    columnsByName: columnsByName,\n    originalRows: tableData,\n    rows: tableData,\n    selectedRows: [],\n    toggleAllState: false,\n    filterOn: !!options?.filter,\n    sortColumn: null,\n    paginationEnabled: !!options?.pagination,\n    pagination: {\n      page: 1,\n      perPage: 10,\n      canNext: true,\n      canPrev: false,\n      nextPage: () => {},\n      prevPage: () => {},\n    },\n  });\n\n  state.pagination.nextPage = useCallback(() => {\n    dispatch({ type: 'NEXT_PAGE' });\n  }, [dispatch]);\n  state.pagination.prevPage = useCallback(\n    () => dispatch({ type: 'PREV_PAGE' }),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    dispatch({ type: 'SET_ROWS', data: tableData });\n  }, [tableData]);\n\n  const headers: HeaderType<T>[] = useMemo(() => {\n    return [\n      ...state.columns.map(column => {\n        const label = column.label ? column.label : column.name;\n        return {\n          ...column,\n          render: makeHeaderRender(label, column.headerRender),\n        };\n      }),\n    ];\n  }, [state.columns]);\n\n  const filter = options?.filter;\n  useEffect(() => {\n    if (filter) {\n      dispatch({ type: 'GLOBAL_FILTER', filter });\n    }\n  }, [filter]);\n\n  return {\n    headers: headers.filter(column => !column.hidden),\n    rows: state.rows,\n    originalRows: state.originalRows,\n    selectedRows: state.selectedRows,\n    dispatch,\n    selectRow: (rowId: number) => dispatch({ type: 'SELECT_ROW', rowId }),\n    toggleAll: () => dispatch({ type: 'TOGGLE_ALL' }),\n    toggleSort: (columnName: string, isAscOverride?: boolean) =>\n      dispatch({ type: 'TOGGLE_SORT', columnName, isAscOverride }),\n    setSearchString: (searchString: string) =>\n      dispatch({ type: 'SEARCH_STRING', searchString }),\n    pagination: state.pagination,\n    toggleAllState: state.toggleAllState,\n  };\n};\n\nconst makeRender = <T extends DataType>(\n  value: any,\n  render: (({ value, row }: { value: any; row: T }) => ReactNode) | undefined,\n  row: T\n) => {\n  return render ? () => render({ row, value }) : () => value;\n};\n\nconst makeHeaderRender = (\n  label: string,\n  render: HeaderRenderType | undefined\n) => {\n  return render ? () => render({ label }) : () => label;\n};\n\nconst sortDataInOrder = <T extends DataType>(\n  data: T[],\n  columns: ColumnType<T>[]\n): T[] => {\n  return data.map((row: any) => {\n    const newRow: any = {};\n    columns.forEach(column => {\n      if (!(column.name in row)) {\n        throw new Error(`Invalid row data, ${column.name} not found`);\n      }\n      newRow[column.name] = row[column.name];\n    });\n    return newRow;\n  });\n};\n\nconst sortByColumn = <T extends DataType>(\n  data: RowType<T>[],\n  sortColumn: string,\n  columns: ColumnStateType<T>[]\n): RowType<T>[] => {\n  let isAscending: boolean | null | undefined = null;\n  let sortedRows: RowType<T>[] = [...data];\n\n  columns.forEach(column => {\n    // if the row was found\n    if (sortColumn === column.name) {\n      isAscending = column.sorted.asc;\n\n      // default to sort by string\n      const columnCompareFn =\n        column.sort || byTextAscending(object => object.original[sortColumn]);\n      sortedRows = data.sort((a, b) => {\n        const result = columnCompareFn(a, b);\n        return isAscending ? result : result * -1;\n      });\n    }\n  });\n\n  return sortedRows;\n};\n\nconst getColumnsByName = <T extends DataType>(\n  columns: ColumnType<T>[]\n): ColumnByNamesType<T> => {\n  const columnsByName: ColumnByNamesType<T> = {};\n  columns.forEach(column => {\n    const col: any = {\n      label: column.label,\n    };\n\n    if (column.render) {\n      col['render'] = column.render;\n    }\n    col['hidden'] = column.hidden;\n    columnsByName[column.name] = col;\n  });\n\n  return columnsByName;\n};\n\nconst getPaginatedData = <T extends DataType>(\n  rows: RowType<T>[],\n  perPage: number,\n  page: number\n) => {\n  const start = (page - 1) * perPage;\n  const end = start + perPage;\n  return rows.slice(start, end);\n};\n"],"names":["byTextAscending","getTextProperty","objectA","objectB","upperA","toUpperCase","upperB","byTextDescending","createReducer","state","action","type","rows","data","sortColumn","sortByColumn","columns","paginationEnabled","getPaginatedData","pagination","perPage","page","originalRows","nextPage","canNext","length","canPrev","prevPage","columnName","columnsByName","Error","isAscending","sortedRows","columnCopy","map","column","name","isAscOverride","undefined","sorted","asc","columnCompareFn","sort","object","original","a","b","result","on","getColumnsByName","filteredRows","filter","selectedRowsById","selectedRows","forEach","row","id","selected","filterOn","stateCopy","newRow","rowId","toggleAllState","stateCopySearch","cells","cell","value","includes","searchString","stateCopyToggle","rowIds","useTable","options","columnsWithSorting","useMemo","label","hidden","tableData","sortedData","sortDataInOrder","newData","idx","Object","entries","field","render","makeRender","reducer","useReducer","dispatch","useCallback","useEffect","headers","makeHeaderRender","headerRender","selectRow","toggleAll","toggleSort","setSearchString","col","start","end","slice"],"mappings":"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"}